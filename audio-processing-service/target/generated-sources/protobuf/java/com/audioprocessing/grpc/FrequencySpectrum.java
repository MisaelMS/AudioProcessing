// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: audio_service.proto

package com.audioprocessing.grpc;

/**
 * Protobuf type {@code audioprocessing.FrequencySpectrum}
 */
public final class FrequencySpectrum extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:audioprocessing.FrequencySpectrum)
    FrequencySpectrumOrBuilder {
private static final long serialVersionUID = 0L;
  // Use FrequencySpectrum.newBuilder() to construct.
  private FrequencySpectrum(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private FrequencySpectrum() {
    frequencies_ = emptyDoubleList();
    magnitudes_ = emptyDoubleList();
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new FrequencySpectrum();
  }

  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.audioprocessing.grpc.AudioServiceProto.internal_static_audioprocessing_FrequencySpectrum_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.audioprocessing.grpc.AudioServiceProto.internal_static_audioprocessing_FrequencySpectrum_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.audioprocessing.grpc.FrequencySpectrum.class, com.audioprocessing.grpc.FrequencySpectrum.Builder.class);
  }

  public static final int FREQUENCIES_FIELD_NUMBER = 1;
  @SuppressWarnings("serial")
  private com.google.protobuf.Internal.DoubleList frequencies_ =
      emptyDoubleList();
  /**
   * <code>repeated double frequencies = 1;</code>
   * @return A list containing the frequencies.
   */
  @java.lang.Override
  public java.util.List<java.lang.Double>
      getFrequenciesList() {
    return frequencies_;
  }
  /**
   * <code>repeated double frequencies = 1;</code>
   * @return The count of frequencies.
   */
  public int getFrequenciesCount() {
    return frequencies_.size();
  }
  /**
   * <code>repeated double frequencies = 1;</code>
   * @param index The index of the element to return.
   * @return The frequencies at the given index.
   */
  public double getFrequencies(int index) {
    return frequencies_.getDouble(index);
  }
  private int frequenciesMemoizedSerializedSize = -1;

  public static final int MAGNITUDES_FIELD_NUMBER = 2;
  @SuppressWarnings("serial")
  private com.google.protobuf.Internal.DoubleList magnitudes_ =
      emptyDoubleList();
  /**
   * <code>repeated double magnitudes = 2;</code>
   * @return A list containing the magnitudes.
   */
  @java.lang.Override
  public java.util.List<java.lang.Double>
      getMagnitudesList() {
    return magnitudes_;
  }
  /**
   * <code>repeated double magnitudes = 2;</code>
   * @return The count of magnitudes.
   */
  public int getMagnitudesCount() {
    return magnitudes_.size();
  }
  /**
   * <code>repeated double magnitudes = 2;</code>
   * @param index The index of the element to return.
   * @return The magnitudes at the given index.
   */
  public double getMagnitudes(int index) {
    return magnitudes_.getDouble(index);
  }
  private int magnitudesMemoizedSerializedSize = -1;

  public static final int PEAK_FREQUENCY_FIELD_NUMBER = 3;
  private double peakFrequency_ = 0D;
  /**
   * <code>double peak_frequency = 3;</code>
   * @return The peakFrequency.
   */
  @java.lang.Override
  public double getPeakFrequency() {
    return peakFrequency_;
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    getSerializedSize();
    if (getFrequenciesList().size() > 0) {
      output.writeUInt32NoTag(10);
      output.writeUInt32NoTag(frequenciesMemoizedSerializedSize);
    }
    for (int i = 0; i < frequencies_.size(); i++) {
      output.writeDoubleNoTag(frequencies_.getDouble(i));
    }
    if (getMagnitudesList().size() > 0) {
      output.writeUInt32NoTag(18);
      output.writeUInt32NoTag(magnitudesMemoizedSerializedSize);
    }
    for (int i = 0; i < magnitudes_.size(); i++) {
      output.writeDoubleNoTag(magnitudes_.getDouble(i));
    }
    if (java.lang.Double.doubleToRawLongBits(peakFrequency_) != 0) {
      output.writeDouble(3, peakFrequency_);
    }
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    {
      int dataSize = 0;
      dataSize = 8 * getFrequenciesList().size();
      size += dataSize;
      if (!getFrequenciesList().isEmpty()) {
        size += 1;
        size += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(dataSize);
      }
      frequenciesMemoizedSerializedSize = dataSize;
    }
    {
      int dataSize = 0;
      dataSize = 8 * getMagnitudesList().size();
      size += dataSize;
      if (!getMagnitudesList().isEmpty()) {
        size += 1;
        size += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(dataSize);
      }
      magnitudesMemoizedSerializedSize = dataSize;
    }
    if (java.lang.Double.doubleToRawLongBits(peakFrequency_) != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeDoubleSize(3, peakFrequency_);
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.audioprocessing.grpc.FrequencySpectrum)) {
      return super.equals(obj);
    }
    com.audioprocessing.grpc.FrequencySpectrum other = (com.audioprocessing.grpc.FrequencySpectrum) obj;

    if (!getFrequenciesList()
        .equals(other.getFrequenciesList())) return false;
    if (!getMagnitudesList()
        .equals(other.getMagnitudesList())) return false;
    if (java.lang.Double.doubleToLongBits(getPeakFrequency())
        != java.lang.Double.doubleToLongBits(
            other.getPeakFrequency())) return false;
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (getFrequenciesCount() > 0) {
      hash = (37 * hash) + FREQUENCIES_FIELD_NUMBER;
      hash = (53 * hash) + getFrequenciesList().hashCode();
    }
    if (getMagnitudesCount() > 0) {
      hash = (37 * hash) + MAGNITUDES_FIELD_NUMBER;
      hash = (53 * hash) + getMagnitudesList().hashCode();
    }
    hash = (37 * hash) + PEAK_FREQUENCY_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
        java.lang.Double.doubleToLongBits(getPeakFrequency()));
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.audioprocessing.grpc.FrequencySpectrum parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.audioprocessing.grpc.FrequencySpectrum parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.audioprocessing.grpc.FrequencySpectrum parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.audioprocessing.grpc.FrequencySpectrum parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.audioprocessing.grpc.FrequencySpectrum parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.audioprocessing.grpc.FrequencySpectrum parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.audioprocessing.grpc.FrequencySpectrum parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.audioprocessing.grpc.FrequencySpectrum parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  public static com.audioprocessing.grpc.FrequencySpectrum parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }

  public static com.audioprocessing.grpc.FrequencySpectrum parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.audioprocessing.grpc.FrequencySpectrum parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.audioprocessing.grpc.FrequencySpectrum parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.audioprocessing.grpc.FrequencySpectrum prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * Protobuf type {@code audioprocessing.FrequencySpectrum}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:audioprocessing.FrequencySpectrum)
      com.audioprocessing.grpc.FrequencySpectrumOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.audioprocessing.grpc.AudioServiceProto.internal_static_audioprocessing_FrequencySpectrum_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.audioprocessing.grpc.AudioServiceProto.internal_static_audioprocessing_FrequencySpectrum_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.audioprocessing.grpc.FrequencySpectrum.class, com.audioprocessing.grpc.FrequencySpectrum.Builder.class);
    }

    // Construct using com.audioprocessing.grpc.FrequencySpectrum.newBuilder()
    private Builder() {

    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);

    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      frequencies_ = emptyDoubleList();
      magnitudes_ = emptyDoubleList();
      peakFrequency_ = 0D;
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.audioprocessing.grpc.AudioServiceProto.internal_static_audioprocessing_FrequencySpectrum_descriptor;
    }

    @java.lang.Override
    public com.audioprocessing.grpc.FrequencySpectrum getDefaultInstanceForType() {
      return com.audioprocessing.grpc.FrequencySpectrum.getDefaultInstance();
    }

    @java.lang.Override
    public com.audioprocessing.grpc.FrequencySpectrum build() {
      com.audioprocessing.grpc.FrequencySpectrum result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.audioprocessing.grpc.FrequencySpectrum buildPartial() {
      com.audioprocessing.grpc.FrequencySpectrum result = new com.audioprocessing.grpc.FrequencySpectrum(this);
      if (bitField0_ != 0) { buildPartial0(result); }
      onBuilt();
      return result;
    }

    private void buildPartial0(com.audioprocessing.grpc.FrequencySpectrum result) {
      int from_bitField0_ = bitField0_;
      if (((from_bitField0_ & 0x00000001) != 0)) {
        frequencies_.makeImmutable();
        result.frequencies_ = frequencies_;
      }
      if (((from_bitField0_ & 0x00000002) != 0)) {
        magnitudes_.makeImmutable();
        result.magnitudes_ = magnitudes_;
      }
      if (((from_bitField0_ & 0x00000004) != 0)) {
        result.peakFrequency_ = peakFrequency_;
      }
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.audioprocessing.grpc.FrequencySpectrum) {
        return mergeFrom((com.audioprocessing.grpc.FrequencySpectrum)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.audioprocessing.grpc.FrequencySpectrum other) {
      if (other == com.audioprocessing.grpc.FrequencySpectrum.getDefaultInstance()) return this;
      if (!other.frequencies_.isEmpty()) {
        if (frequencies_.isEmpty()) {
          frequencies_ = other.frequencies_;
          frequencies_.makeImmutable();
          bitField0_ |= 0x00000001;
        } else {
          ensureFrequenciesIsMutable();
          frequencies_.addAll(other.frequencies_);
        }
        onChanged();
      }
      if (!other.magnitudes_.isEmpty()) {
        if (magnitudes_.isEmpty()) {
          magnitudes_ = other.magnitudes_;
          magnitudes_.makeImmutable();
          bitField0_ |= 0x00000002;
        } else {
          ensureMagnitudesIsMutable();
          magnitudes_.addAll(other.magnitudes_);
        }
        onChanged();
      }
      if (other.getPeakFrequency() != 0D) {
        setPeakFrequency(other.getPeakFrequency());
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 9: {
              double v = input.readDouble();
              ensureFrequenciesIsMutable();
              frequencies_.addDouble(v);
              break;
            } // case 9
            case 10: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              int alloc = length > 4096 ? 4096 : length;
              ensureFrequenciesIsMutable(alloc / 8);
              while (input.getBytesUntilLimit() > 0) {
                frequencies_.addDouble(input.readDouble());
              }
              input.popLimit(limit);
              break;
            } // case 10
            case 17: {
              double v = input.readDouble();
              ensureMagnitudesIsMutable();
              magnitudes_.addDouble(v);
              break;
            } // case 17
            case 18: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              int alloc = length > 4096 ? 4096 : length;
              ensureMagnitudesIsMutable(alloc / 8);
              while (input.getBytesUntilLimit() > 0) {
                magnitudes_.addDouble(input.readDouble());
              }
              input.popLimit(limit);
              break;
            } // case 18
            case 25: {
              peakFrequency_ = input.readDouble();
              bitField0_ |= 0x00000004;
              break;
            } // case 25
            default: {
              if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                done = true; // was an endgroup tag
              }
              break;
            } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }
    private int bitField0_;

    private com.google.protobuf.Internal.DoubleList frequencies_ = emptyDoubleList();
    private void ensureFrequenciesIsMutable() {
      if (!frequencies_.isModifiable()) {
        frequencies_ = makeMutableCopy(frequencies_);
      }
      bitField0_ |= 0x00000001;
    }
    private void ensureFrequenciesIsMutable(int capacity) {
      if (!frequencies_.isModifiable()) {
        frequencies_ = makeMutableCopy(frequencies_, capacity);
      }
      bitField0_ |= 0x00000001;
    }
    /**
     * <code>repeated double frequencies = 1;</code>
     * @return A list containing the frequencies.
     */
    public java.util.List<java.lang.Double>
        getFrequenciesList() {
      frequencies_.makeImmutable();
      return frequencies_;
    }
    /**
     * <code>repeated double frequencies = 1;</code>
     * @return The count of frequencies.
     */
    public int getFrequenciesCount() {
      return frequencies_.size();
    }
    /**
     * <code>repeated double frequencies = 1;</code>
     * @param index The index of the element to return.
     * @return The frequencies at the given index.
     */
    public double getFrequencies(int index) {
      return frequencies_.getDouble(index);
    }
    /**
     * <code>repeated double frequencies = 1;</code>
     * @param index The index to set the value at.
     * @param value The frequencies to set.
     * @return This builder for chaining.
     */
    public Builder setFrequencies(
        int index, double value) {

      ensureFrequenciesIsMutable();
      frequencies_.setDouble(index, value);
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <code>repeated double frequencies = 1;</code>
     * @param value The frequencies to add.
     * @return This builder for chaining.
     */
    public Builder addFrequencies(double value) {

      ensureFrequenciesIsMutable();
      frequencies_.addDouble(value);
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <code>repeated double frequencies = 1;</code>
     * @param values The frequencies to add.
     * @return This builder for chaining.
     */
    public Builder addAllFrequencies(
        java.lang.Iterable<? extends java.lang.Double> values) {
      ensureFrequenciesIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(
          values, frequencies_);
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <code>repeated double frequencies = 1;</code>
     * @return This builder for chaining.
     */
    public Builder clearFrequencies() {
      frequencies_ = emptyDoubleList();
      bitField0_ = (bitField0_ & ~0x00000001);
      onChanged();
      return this;
    }

    private com.google.protobuf.Internal.DoubleList magnitudes_ = emptyDoubleList();
    private void ensureMagnitudesIsMutable() {
      if (!magnitudes_.isModifiable()) {
        magnitudes_ = makeMutableCopy(magnitudes_);
      }
      bitField0_ |= 0x00000002;
    }
    private void ensureMagnitudesIsMutable(int capacity) {
      if (!magnitudes_.isModifiable()) {
        magnitudes_ = makeMutableCopy(magnitudes_, capacity);
      }
      bitField0_ |= 0x00000002;
    }
    /**
     * <code>repeated double magnitudes = 2;</code>
     * @return A list containing the magnitudes.
     */
    public java.util.List<java.lang.Double>
        getMagnitudesList() {
      magnitudes_.makeImmutable();
      return magnitudes_;
    }
    /**
     * <code>repeated double magnitudes = 2;</code>
     * @return The count of magnitudes.
     */
    public int getMagnitudesCount() {
      return magnitudes_.size();
    }
    /**
     * <code>repeated double magnitudes = 2;</code>
     * @param index The index of the element to return.
     * @return The magnitudes at the given index.
     */
    public double getMagnitudes(int index) {
      return magnitudes_.getDouble(index);
    }
    /**
     * <code>repeated double magnitudes = 2;</code>
     * @param index The index to set the value at.
     * @param value The magnitudes to set.
     * @return This builder for chaining.
     */
    public Builder setMagnitudes(
        int index, double value) {

      ensureMagnitudesIsMutable();
      magnitudes_.setDouble(index, value);
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     * <code>repeated double magnitudes = 2;</code>
     * @param value The magnitudes to add.
     * @return This builder for chaining.
     */
    public Builder addMagnitudes(double value) {

      ensureMagnitudesIsMutable();
      magnitudes_.addDouble(value);
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     * <code>repeated double magnitudes = 2;</code>
     * @param values The magnitudes to add.
     * @return This builder for chaining.
     */
    public Builder addAllMagnitudes(
        java.lang.Iterable<? extends java.lang.Double> values) {
      ensureMagnitudesIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(
          values, magnitudes_);
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     * <code>repeated double magnitudes = 2;</code>
     * @return This builder for chaining.
     */
    public Builder clearMagnitudes() {
      magnitudes_ = emptyDoubleList();
      bitField0_ = (bitField0_ & ~0x00000002);
      onChanged();
      return this;
    }

    private double peakFrequency_ ;
    /**
     * <code>double peak_frequency = 3;</code>
     * @return The peakFrequency.
     */
    @java.lang.Override
    public double getPeakFrequency() {
      return peakFrequency_;
    }
    /**
     * <code>double peak_frequency = 3;</code>
     * @param value The peakFrequency to set.
     * @return This builder for chaining.
     */
    public Builder setPeakFrequency(double value) {

      peakFrequency_ = value;
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }
    /**
     * <code>double peak_frequency = 3;</code>
     * @return This builder for chaining.
     */
    public Builder clearPeakFrequency() {
      bitField0_ = (bitField0_ & ~0x00000004);
      peakFrequency_ = 0D;
      onChanged();
      return this;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:audioprocessing.FrequencySpectrum)
  }

  // @@protoc_insertion_point(class_scope:audioprocessing.FrequencySpectrum)
  private static final com.audioprocessing.grpc.FrequencySpectrum DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.audioprocessing.grpc.FrequencySpectrum();
  }

  public static com.audioprocessing.grpc.FrequencySpectrum getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<FrequencySpectrum>
      PARSER = new com.google.protobuf.AbstractParser<FrequencySpectrum>() {
    @java.lang.Override
    public FrequencySpectrum parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      Builder builder = newBuilder();
      try {
        builder.mergeFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(builder.buildPartial());
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(e)
            .setUnfinishedMessage(builder.buildPartial());
      }
      return builder.buildPartial();
    }
  };

  public static com.google.protobuf.Parser<FrequencySpectrum> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<FrequencySpectrum> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.audioprocessing.grpc.FrequencySpectrum getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

